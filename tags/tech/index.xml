<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tech on Arayzee&#39;s Home</title>
    <link>https://arayzee.github.io/tags/tech/</link>
    <description>Recent content in tech on Arayzee&#39;s Home</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 22 Apr 2020 21:58:39 +0800</lastBuildDate>
    
	<atom:link href="https://arayzee.github.io/tags/tech/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>jQuery基础</title>
      <link>https://arayzee.github.io/jquery/</link>
      <pubDate>Wed, 22 Apr 2020 21:58:39 +0800</pubDate>
      
      <guid>https://arayzee.github.io/jquery/</guid>
      <description>jQuery作为前端最长寿的库迄今为止已经存在了14年了，或许它早该过时，可实际上目前仍有80%左右的网站使用着jQuery。时间与用户证明了jQuery的可靠性，其优雅的设计模式与简洁的代码依然值得今天的我们学习。
 jQuery 如何获取元素 &amp;ldquo;选择某个网页元素，然后对其进行某种操作&amp;quot;是jQuery的基本设计思想和主要用法。
把选择表达式传入jQuery构造函数，然后将得到封装好API的被选中元素的jQuery对象。
选择表达式可以是CSS选择器：
$(document) //选择整个文档对象  $(&amp;#39;#myId&amp;#39;) //选择ID为myId的网页元素  $(&amp;#39;div.myClass&amp;#39;) // 选择class为myClass的div元素  $(&amp;#39;input[name=first]&amp;#39;) // 选择name属性等于first的input元素 也可以是jQuery特有表达式：
$(&amp;#39;a:first&amp;#39;) //选择网页中第一个a元素  $(&amp;#39;tr:odd&amp;#39;) //选择表格的奇数行  $(&amp;#39;#myForm :input&amp;#39;) // 选择表单中的input元素  $(&amp;#39;div:visible&amp;#39;) //选择可见的div元素  $(&amp;#39;div:gt(2)&amp;#39;) // 选择所有的div元素，除了前三个  $(&amp;#39;div:animated&amp;#39;) // 选择当前处于动画状态的div元素 此外，jQuery还支持改变结果集，通过强大的过滤器来对结果进行筛选、移动：
筛选： $(&amp;#39;div&amp;#39;).has(&amp;#39;p&amp;#39;); // 选择包含p元素的div元素  $(&amp;#39;div&amp;#39;).not(&amp;#39;.myClass&amp;#39;); //选择class不等于myClass的div元素  $(&amp;#39;div&amp;#39;).filter(&amp;#39;.myClass&amp;#39;); //选择class等于myClass的div元素  $(&amp;#39;div&amp;#39;).first(); //选择第1个div元素  $(&amp;#39;div&amp;#39;).eq(5); //选择第6个div元素  移动： $(&amp;#39;div&amp;#39;).next(&amp;#39;p&amp;#39;); //选择div元素后面的第一个p元素  $(&amp;#39;div&amp;#39;).parent(); //选择div元素的父元素  $(&amp;#39;div&amp;#39;).closest(&amp;#39;form&amp;#39;); //选择离div最近的那个form父元素  $(&amp;#39;div&amp;#39;).</description>
    </item>
    
    <item>
      <title>JS函数执行时机</title>
      <link>https://arayzee.github.io/js3/</link>
      <pubDate>Mon, 13 Apr 2020 22:08:11 +0800</pubDate>
      
      <guid>https://arayzee.github.io/js3/</guid>
      <description>观察以下代码：
let i = 0 for(i = 0; i&amp;lt;6; i++){ setTimeout(()=&amp;gt;{ console.log(i) },0) } 大多数人凭借直觉可能会觉得打印结果为0, 1, 2, 3, 4, 5，setTimeout(()=&amp;gt;{console.log(i)},0)仿佛和直接执行没有区别。然而事实上这段代码的打印结果为6, 6, 6, 6, 6, 6，setTimeout函数会将回调函数加入任务队列，即使延时是0ms，只有把当前队列中的任务执行完才会调用setTimeout函数内的回调函数。在此例中，当前任务为for循环，当i = 6时，for循环结束，此时开始依次执行6次console.log(i),所以打印结果为6, 6, 6, 6, 6, 6。
那么如何才能让上述代码打印出0, 1, 2, 3, 4, 5呢？
方法1 for(let i = 0; i&amp;lt;6; i++){ setTimeout(()=&amp;gt;{ console.log(i) },0) } 仅仅是把let放入for循环里面，就得到了我们想要的0, 1, 2, 3, 4, 5。看起来匪夷所思，其实是JS在这里做了手脚，当for与let组合时，JS会为每一次循环创建一个循环变量，所以这段代码实际上产生了7个i。JS为了迎合人们的直觉做出这种反逻辑的修改实在是令人困惑，也难怪被这么多人诟病。
方法2 let i = 0 for(i = 0; i&amp;lt;6; i++){ ! function(i) { setTimeout(()=&amp;gt;{ console.log(i) },0) } (i) } 在这个方法中，我们在每个循环内把当前i的值传入一个立即执行函数中作为局部变量记录下来，所以我们打印的i其实是每个立即执行函数中记录了当时传入值的局部变量i，得到了0, 1, 2, 3, 4, 5的结果。</description>
    </item>
    
    <item>
      <title>JS对象基本用法</title>
      <link>https://arayzee.github.io/js2/</link>
      <pubDate>Fri, 10 Apr 2020 09:40:13 +0800</pubDate>
      
      <guid>https://arayzee.github.io/js2/</guid>
      <description>数据类型 七种数据类型  number string bool symbol undefined null object  其中object是唯一一种复杂类型
五个falsy值  &#39;&amp;rsquo; (空字符串) 0 NaN undefined null   对象 定义  无序的数据集合 键值对的集合  写法 { &amp;#39;name&amp;#39;: &amp;#39;arayzee&amp;#39;, &amp;#39;age&amp;#39;: 17 } 细节  键名是字符串，不是标识符，可以包含任意字符 引号可以省略，省略后就只能写标识符 就算引号省略了，键名还是字符串  声明对象的两种语法  let obj = { &#39;name&#39;: &#39;arayzee&#39;, &#39;age&#39;: 17 } 简略写法，常用 let obj = new Object({ &#39;name&#39;: &#39;arayzee&#39;, &#39;age&#39;: 17 }) 完整写法  增 OR 改   直接赋值</description>
    </item>
    
    <item>
      <title>JS基本语法</title>
      <link>https://arayzee.github.io/js1/</link>
      <pubDate>Thu, 09 Apr 2020 13:25:30 +0800</pubDate>
      
      <guid>https://arayzee.github.io/js1/</guid>
      <description>表达式和语句 通常表达式都会有值，而语句可能有可能没有。语句可以理解为一个行为，通常会改变环境（声明、赋值）。例如1+2、add(1, 2)、console.log(3)为表达式，var a = 1为语句。
JS中大部分空格、回车没有实际意义，但是return后面不能加回车。
JS是大小写敏感的
标识符的规则 标识符是用来识别具体对象的一个名称。最常见的标识符就是变量名，以及后面要提到的函数名。
 第一个字符可以是Unicode字母或$或_或中文 后面的字符除了上述几种还可以是数字  条件语句 if else 语句 当指定条件为真，if 语句会执行一段语句。如果条件为假，则执行另一段语句。
语法：
if (condition) statement1 [else statement2] condition 值为真或假的表达式
statement1 当condition为真时执行的语句。可为任意语句，包括更深层的内部if语句。要执行多条语句，使用块语句（{ &amp;hellip; }）将这些语句分组；若不想执行语句，则使用空语句。
statement2 如果condition为假且 else从句存在时执行的语句。可为任意语句，包括块语句和嵌套的if语句。
多层 if&amp;hellip;else 语句可使用 else if 从句。
switch 语句 switch 语句评估一个表达式，将表达式的值与case子句匹配，并执行与该情况相关联的语句。
语法：
switch (expression) { case value1: // 当 expression 的结果与 value1 匹配时，执行此处语句  [break;] case value2: // 当 expression 的结果与 value2 匹配时，执行此处语句  [break;] ... case valueN: // 当 expression 的结果与 valueN 匹配时，执行此处语句  [break;] [default: // 如果 expression 与上面的 value 值都不匹配，执行此处语句  [break;]] } expression 一个用来与 case 子语句匹配的表达式。</description>
    </item>
    
    <item>
      <title>浅析URL</title>
      <link>https://arayzee.github.io/url/</link>
      <pubDate>Tue, 04 Feb 2020 14:32:50 +0800</pubDate>
      
      <guid>https://arayzee.github.io/url/</guid>
      <description>URL URL（Uniform Resource Locator - 统一资源定位系统）是表示资源位置的字符串。
URL由以下几部分组成：
协议 + 域名/IP + 端口号 + 路径 + 查询字符串 + 锚点
 协议： 表示请求需要使用的协议，对于前端来说只关注HTTP和HTTPS 域名/IP： 表示请求的资源地址，IP地址用于标识该主机在互联网中的位置，而域名则会通过DNS解析为IP 端口号： 主机通过不同的端口号来提供不同的服务，HTTP默认端口号为80，HTTPS默认端口号为443，当请求的端口号为默认端口号时可省略不写 路径： 表示请求的资源路径 查询字符串： 请求时给主机提供的查询参数（同样页面不同内容） 锚点： 用于定位文档中的位置（同样内容不同位置），并不会添加到请求中，仅在本地作用  例如：
DNS DNS（Domain Name System - 域名系统）是一种分布式网络目录服务，主要用于域名与 IP 地址的相互转换。
当访问一个域名时，UA会先将域名发送给DNS服务器，然后DNS服务器将域名对应的IP返回给UA，然后UA才会向对应IP的端口发送请求。
可以使用nslookup命令来查询域名对应的所有IP，例如：
IP IP（Internet Protocal - 网际互连协议）主要约定了两件事：
 如何定位一台设备 如何封装数据报文，和其他设备交流  IP分为外网IP和内网IP，外网IP定位的是路由器在互联网上的位置，而内网IP则由路由器分配，用于定位你的设备。外网和内网之间不互通，其间的交流通过路由器来进行，所以路由器又称为网关。
几个特殊的IP：
 127.0.0.1 表示自己 localhost 通过hosts指定为自己 0.0.0.0 不表示任何设备  可以通过修改hosts文件来为IP自定义一个仅在本地有效的域名，localhost就是这样实现的。具体方法为：
 找到C:\Windows\System32\drivers\etc\hosts文件，用管理员权限打开 添加映射关系，语法为IP 域名如127.0.0.1 localhost  可以使用ping命令来查询域名对应的IP以及响应延迟，例如：</description>
    </item>
    
    <item>
      <title>CSS知识总结</title>
      <link>https://arayzee.github.io/css1/</link>
      <pubDate>Mon, 03 Feb 2020 20:44:39 +0800</pubDate>
      
      <guid>https://arayzee.github.io/css1/</guid>
      <description>浏览器渲染原理 浏览器渲染过程  根据HTML构建HTML树（DOM） 根据CSS构建CSS树（CSSDOM） 将两棵树合并成一颗渲染树（render tree） Layout - 布局（文档流、盒模型、计算大小和位置） Paint - 绘制（把边框颜色、文字颜色、阴影等画出来） Compose - 合成（根据层叠关系展示画面）  三棵树示意图：
渲染完成后如何更新样式？ 一般我们使用JS来更新样式，例如：
div.style.background = &amp;#39;blue&amp;#39; div.style.display = &amp;#39;none&amp;#39; div.classList.add(&amp;#39;blue&amp;#39;) div.remove() 当样式变更后，浏览器通过Layout - Paint - Compose三个步骤来更新样式，但并非所有样式变更都会触发完整的三步，例如div.remove()会触发完整的三步，div.style.background = &#39;blue&#39;会跳过Layout，改变transform则会跳过Layout和Paint。
三种更新方式示意图：
对于样式变更会触发哪些步骤可查阅https://csstriggers.com/
CSS动画 css实现动画有两种方式：transition和animation
transition 语法：transition: 属性名 时长 过渡方式 延迟
transition可以为两个状态补充中间帧。如果还有中间态，可以通过监听transitionend事件或者用setTimeout来实现，具体代码如下：
&amp;lt;div class=&amp;#34;wrapper&amp;#34;&amp;gt; &amp;lt;div id=&amp;#34;demo&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;button id=button&amp;gt;开始&amp;lt;/button&amp;gt; &amp;lt;/div&amp;gt; #demo{ width: 100px; height: 100px; border: 1px solid red; margin: 50px; transition: transform 1s linear; } #demo.b{ transform: translateX(200px); } #demo.</description>
    </item>
    
    <item>
      <title>HTML常用标签</title>
      <link>https://arayzee.github.io/html2/</link>
      <pubDate>Wed, 15 Jan 2020 13:27:08 +0800</pubDate>
      
      <guid>https://arayzee.github.io/html2/</guid>
      <description>a标签 &amp;lt;a&amp;gt;可以创建通向其他网页、文件、同一页面内的位置、电子邮件地址或任何其他 URL 的超链接。常用属性有：herf、target。
herf herf有以下几种取值：
网址  以http://、https://等协议开头的网址，如http://google.com。 以//开头的网址，如//google.com，该写法会继承当前网址的协议。  路径  可使用相对路径或绝对路径，如a/b/c、/a/b/c，注意不要直接双击打开html文件，因为这样打开时，绝对路径会定位到当前盘符的根目录而非html服务的根目录。 若文件在当前目录下，可直接写文件名。  伪协议  javascript:代码;点击a标签后将执行写入的代码。常用javascript:;来实现点击a标签后不采取操作的效果。 mailto:邮箱 点击a标签后向指定邮箱发送邮件。 tel:手机号 点击a标签后向指定号码拨号。  id  #id 点击a标签后跳转到页面中拥有该id的元素的位置。  target target有2种取值：
内置名字  _blank 在新标签页打开。 _top 在iframe的顶层打开。 _parent 在iframe的父级打开。 _self 在iframe自身打开。  程序员命名  window的name 在指定名称的窗口打开。 iframe的name 在指定名称的iframe打开。  img标签 &amp;lt;img&amp;gt;能发出get请求，展示一张图片
常用属性  src 必须，包含了你想嵌入的图片的文件路径。 alt 包含一条对图像的文本描述，这不是强制性的，但对可访问性而言，它难以置信地有用——屏幕阅读器会将这些描述读给需要使用阅读器的使用者听，让他们知道图像的含义。如果由于某种原因无法加载图像，普通浏览器也会在页面上显示alt属性中的备用文本：例如，网络错误、内容被屏蔽或链接过期时。 width,height 设置原始分辨率：这将设置图像应占用的空间，以确保图像被加载之前页面的布局是稳定的。  常用事件  onload 图片加载完毕后立即触发。 onerror 加载或渲染图像时发生错误时触发。  响应式 移动端img标签应设置样式max-width: 100%以确保图片会自适应屏幕宽度。</description>
    </item>
    
    <item>
      <title>HTML入门笔记</title>
      <link>https://arayzee.github.io/html1/</link>
      <pubDate>Fri, 03 Jan 2020 02:38:33 +0800</pubDate>
      
      <guid>https://arayzee.github.io/html1/</guid>
      <description>HTML 起源 HTML（超文本标记语言——HyperText Markup Language）是构成 Web 世界的一砖一瓦。它定义了网页内容的含义和结构。除 HTML 以外的其它技术则通常用来描述一个网页的表现与展示效果（如 CSS），或功能与行为（如 JavaScript）。
“超文本”（hypertext）是指连接单个网站内或多个网站间的网页的链接。链接是网络的一个基本方面。只要将内容上传到互联网，并将其与他人创建的页面相链接，你就成为了万维网的积极参与者。
HTML 使用“标记”（markup）来注明文本、图片和其他内容，以便于在 Web 浏览器中显示。HTML 标记包含一些特殊“元素”如 &amp;lt;head&amp;gt;，&amp;lt;title&amp;gt;，&amp;lt;body&amp;gt;，&amp;lt;header&amp;gt;，&amp;lt;footer&amp;gt;，&amp;lt;article&amp;gt;，&amp;lt;section&amp;gt;，&amp;lt;p&amp;gt;，&amp;lt;div&amp;gt;，&amp;lt;span&amp;gt;，&amp;lt;img&amp;gt;，&amp;lt;aside&amp;gt;，&amp;lt;audio&amp;gt;，&amp;lt;canvas&amp;gt;，&amp;lt;datalist&amp;gt;，&amp;lt;details&amp;gt;，&amp;lt;embed&amp;gt;，&amp;lt;nav&amp;gt;，&amp;lt;output&amp;gt;，&amp;lt;progress&amp;gt;，&amp;lt;video&amp;gt; 等等等等。
HTML 元素通过“标签”（tag）将文本从文档中引出，标签由在“&amp;lt;”和“&amp;gt;”中包裹的元素名组成，HTML 标签里的元素名不区分大小写。也就是说，它们可以用大写，小写或混合形式书写。例如，&amp;lt;title&amp;gt; 标签可以写成 &amp;lt;Title&amp;gt;，&amp;lt;TITLE&amp;gt; 或以任何其他方式。
HTML由Tim Berners-Lee于1990年创立，一直被用作WWW的信息表示语言。WWW（万维网——World Wide Web）是存储在Internet计算机中、数量巨大的文档的集合。这些文档称为页面，它是一种超文本(Hypertext)信息，可以用于描述超媒体。文本、图形、视频、音频等多媒体，称为超媒体(Hypermedia)。Web上的信息是由彼此关联的文档组成的，而使其连接在一起的是超链接(Hyperlink)。WWW的三大核心是HTML、HTTP、URL，有了WWW才有了上网（输入网址，看到网站）这一概念。
HTML起手式 在VSCode中创建HTML文件，我们可以使用emmet语法输入!按Tab键快速创建HTML框架，如下：
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;!--文档类型 --&amp;gt; &amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt; &amp;lt;!--html标签，可声明语言，如中文zh-CN --&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34;&amp;gt; &amp;lt;!--声明文件字符编码 --&amp;gt; &amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no&amp;#34;&amp;gt; &amp;lt;!--禁用缩放，兼容手机 --&amp;gt; &amp;lt;meta http-equiv=&amp;#34;X-UA-Compatible&amp;#34; content=&amp;#34;ie=edge&amp;#34;&amp;gt; &amp;lt;!--告诉IE使用最新内核 --&amp;gt; &amp;lt;title&amp;gt;Document&amp;lt;/title&amp;gt; &amp;lt;!--标题 --&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; HTML章节标签  标题 h1~h6 章节 section 文章 article 段落 p 头部 header 脚部 footer 主要内容 main 旁支内容 aside 划分 div  HTML全局属性 HTML所有标签都具有的属性：</description>
    </item>
    
    <item>
      <title>使用Hugo搭建静态博客并发布到Github上</title>
      <link>https://arayzee.github.io/hugo/</link>
      <pubDate>Thu, 19 Dec 2019 04:47:38 +0800</pubDate>
      
      <guid>https://arayzee.github.io/hugo/</guid>
      <description>Hugo的安装 前往Hugo releases下载hugo_xxx_Windows-64bit.zip，解压后将路径添加到PATH。重启终端，运行
hugo version 如打印出版本号则Hugo安装成功
Hugo搭建博客 1.创建新的项目 hugo new site 项目名 2.添加主题 cd 项目文件夹 git init git submodule add https://github.com/budparr/gohugo-theme-ananke.git themes/ananke echo &amp;#39;theme = &amp;#34;ananke&amp;#34;&amp;#39; &amp;gt;&amp;gt; config.toml 如需修改主题，请访问themes.gohugo.io
3.添加内容 hugo new 内容路径 例如：
hugo new posts/my-first-post.md 生成的文件默认带有以下内容：
--- title: &amp;#34;My First Post&amp;#34; date: 2019-03-26T08:47:11+01:00 draft: true //标记是否为草稿，打包前需确认要展示的文章的draft为false --- 4.启动Hugo server预览 hugo server -D 开启Hugo server后，访问给出的地址即可查看你的博客，默认为http://localhost:1313/
5.打包静态网页 hugo -D 打包后你的项目中会生成一个public文件夹，就是它了
使用Github发布你的博客 首先在创建Github上创建一个名为「你的Github用户名.github.io」的仓库，把打包后的public文件夹关联到这个仓库，推送内容后点开该仓库的Settings，找到GitHub Pages配置，把Source设置为master branch 之后便可通过你的Github用户名.github.io来访问你的博客。</description>
    </item>
    
  </channel>
</rss>
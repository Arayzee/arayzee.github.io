<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JS on Arayzee&#39;s Home</title>
    <link>https://arayzee.github.io/tags/js/</link>
    <description>Recent content in JS on Arayzee&#39;s Home</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 13 Apr 2020 22:08:11 +0800</lastBuildDate>
    
	<atom:link href="https://arayzee.github.io/tags/js/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>JS函数执行时机</title>
      <link>https://arayzee.github.io/js3/</link>
      <pubDate>Mon, 13 Apr 2020 22:08:11 +0800</pubDate>
      
      <guid>https://arayzee.github.io/js3/</guid>
      <description>观察以下代码：
let i = 0 for(i = 0; i&amp;lt;6; i++){ setTimeout(()=&amp;gt;{ console.log(i) },0) } 大多数人凭借直觉可能会觉得打印结果为0, 1, 2, 3, 4, 5，setTimeout(()=&amp;gt;{console.log(i)},0)仿佛和直接执行没有区别。然而事实上这段代码的打印结果为6, 6, 6, 6, 6, 6，setTimeout函数会将回调函数加入任务队列，即使延时是0ms，只有把当前队列中的任务执行完才会调用setTimeout函数内的回调函数。在此例中，当前任务为for循环，当i = 6时，for循环结束，此时开始依次执行6次console.log(i),所以打印结果为6, 6, 6, 6, 6, 6。
那么如何才能让上述代码打印出0, 1, 2, 3, 4, 5呢？
方法1 for(let i = 0; i&amp;lt;6; i++){ setTimeout(()=&amp;gt;{ console.log(i) },0) } 仅仅是把let放入for循环里面，就得到了我们想要的0, 1, 2, 3, 4, 5。看起来匪夷所思，其实是JS在这里做了手脚，当for与let组合时，JS会为每一次循环创建一个循环变量，所以这段代码实际上产生了7个i。JS为了迎合人们的直觉做出这种反逻辑的修改实在是令人困惑，也难怪被这么多人诟病。
方法2 let i = 0 for(i = 0; i&amp;lt;6; i++){ ! function(i) { setTimeout(()=&amp;gt;{ console.log(i) },0) } (i) } 在这个方法中，我们在每个循环内把当前i的值传入一个立即执行函数中作为局部变量记录下来，所以我们打印的i其实是每个立即执行函数中记录了当时传入值的局部变量i，得到了0, 1, 2, 3, 4, 5的结果。</description>
    </item>
    
    <item>
      <title>JS对象基本用法</title>
      <link>https://arayzee.github.io/js2/</link>
      <pubDate>Fri, 10 Apr 2020 09:40:13 +0800</pubDate>
      
      <guid>https://arayzee.github.io/js2/</guid>
      <description>数据类型 七种数据类型  number string bool symbol undefined null object  其中object是唯一一种复杂类型
五个falsy值  &#39;&amp;rsquo; (空字符串) 0 NaN undefined null   对象 定义  无序的数据集合 键值对的集合  写法 { &amp;#39;name&amp;#39;: &amp;#39;arayzee&amp;#39;, &amp;#39;age&amp;#39;: 17 } 细节  键名是字符串，不是标识符，可以包含任意字符 引号可以省略，省略后就只能写标识符 就算引号省略了，键名还是字符串  声明对象的两种语法  let obj = { &#39;name&#39;: &#39;arayzee&#39;, &#39;age&#39;: 17 } 简略写法，常用 let obj = new Object({ &#39;name&#39;: &#39;arayzee&#39;, &#39;age&#39;: 17 }) 完整写法  增 OR 改   直接赋值</description>
    </item>
    
    <item>
      <title>JS基本语法</title>
      <link>https://arayzee.github.io/js1/</link>
      <pubDate>Thu, 09 Apr 2020 13:25:30 +0800</pubDate>
      
      <guid>https://arayzee.github.io/js1/</guid>
      <description>表达式和语句 通常表达式都会有值，而语句可能有可能没有。语句可以理解为一个行为，通常会改变环境（声明、赋值）。例如1+2、add(1, 2)、console.log(3)为表达式，var a = 1为语句。
JS中大部分空格、回车没有实际意义，但是return后面不能加回车。
JS是大小写敏感的
标识符的规则 标识符是用来识别具体对象的一个名称。最常见的标识符就是变量名，以及后面要提到的函数名。
 第一个字符可以是Unicode字母或$或_或中文 后面的字符除了上述几种还可以是数字  条件语句 if else 语句 当指定条件为真，if 语句会执行一段语句。如果条件为假，则执行另一段语句。
语法：
if (condition) statement1 [else statement2] condition 值为真或假的表达式
statement1 当condition为真时执行的语句。可为任意语句，包括更深层的内部if语句。要执行多条语句，使用块语句（{ &amp;hellip; }）将这些语句分组；若不想执行语句，则使用空语句。
statement2 如果condition为假且 else从句存在时执行的语句。可为任意语句，包括块语句和嵌套的if语句。
多层 if&amp;hellip;else 语句可使用 else if 从句。
switch 语句 switch 语句评估一个表达式，将表达式的值与case子句匹配，并执行与该情况相关联的语句。
语法：
switch (expression) { case value1: // 当 expression 的结果与 value1 匹配时，执行此处语句  [break;] case value2: // 当 expression 的结果与 value2 匹配时，执行此处语句  [break;] ... case valueN: // 当 expression 的结果与 valueN 匹配时，执行此处语句  [break;] [default: // 如果 expression 与上面的 value 值都不匹配，执行此处语句  [break;]] } expression 一个用来与 case 子语句匹配的表达式。</description>
    </item>
    
    <item>
      <title>JavaScript 的诞生</title>
      <link>https://arayzee.github.io/the-origin-of-js/</link>
      <pubDate>Fri, 07 Feb 2020 14:53:47 +0800</pubDate>
      
      <guid>https://arayzee.github.io/the-origin-of-js/</guid>
      <description>缘起 1995年之前，浏览器正如其名，只具备浏览网页的功能，所有交互都需要通过服务器来进行，以当时的网络状况，这一过程可能需要几十秒。即便是最简单的表单验证，也需要等服务器长时间的反复响应，用户体验有多糟糕可想而知。随着网上冲浪的人数越来越多，亟需一种网页脚本语言来解决这一现状。凭借Navigator浏览器而名声鹊起的网景公司（Netscape）看到了这一机遇，决定开发一种网页脚本语言。当时Sun公司正大肆宣扬自家的Java语言，并许诺这种语言可以&amp;quot;一次编写，到处运行&amp;rdquo;，它看上去很可能成为未来的主宰。于是网景决定与Sun结盟，这就是为什么早期浏览器可以运行Java的原因，只是因为它使得网页过于复杂，所以后来不得不放弃。1995年5月，深受Java影响的网景公司做出了这样一个决策：未来的网页脚本语言必须&amp;quot;看上去与Java足够相似&amp;rdquo;，但是比Java简单，使得非专业的网页作者也能很快上手。34岁的系统程序员Brendan Eich临危受命，担任了这一语言的设计师，Javascript应运而生。
图为Navigator浏览器1.0版： 祸根 玩具语言的自我修养 虽说Brendan被任命为Javascript的设计师，但其本人对Java十分不感冒，同时网景对Javascript的要求很低，用来完成表单验证等简单操作就行了，为应付公司安排，Brendan仅花了10天时间设计Javascript，他的设计思路如下：
 借鉴C语言的基本语法 借鉴Java语言的数据类型和内存管理 借鉴Scheme语言，将函数提升到&amp;quot;第一等公民&amp;rdquo;（first class）的地位 借鉴Self语言，使用基于原型（prototype）的继承机制  可以说起初Javascript只是一门玩具语言，Brendan万万没想到Javascript会发展为现在这一盛状。由于当时设计时间极短，导致Javascript很多细节考虑的不严谨，甚至连Brendan本人都这样评价自己的Javascript：
 &amp;ldquo;与其说我爱Javascript，不如说我恨它。它是C语言和Self语言一夜情的产物。十八世纪英国文学家约翰逊博士说得好：&amp;lsquo;它的优秀之处并非原创，它的原创之处并不优秀。&#39;（the part that is good is not original, and the part that is original is not good.）&amp;rdquo;
 网景之死 网景凭借Javascript把自己抬升到了一个新的高度，同期，微软为了对抗网景，推出了自家的JScript以及支持JScript的IE3浏览器。为了反击微软，网景决定为Javascript申请国际标准。1997年6月，第一个国际标准ECMA-262正式颁布。要知道，C语言问世将近20年之后，国际标准才颁布，过早的标准化使得Javascript还未来得及调整自身的缺陷就已早早定型，为Javascript留下了许多历史遗留问题。
可惜好景不长，微软将IE捆绑进Windows，为网景判下了死刑。网景虽然死了，但Javascript的故事还在继续。
方兴未艾 长期以来Javascript正如网景期望的那样完成着简单的脚本工作，页面开发都是由后端和设计师完成。直到2004年谷歌的Gmail在线网页发布，人们才意识到网页原来不只可以看新闻和图片。其使用的AJAX技术为世界打开了一扇名为“前端”的大门，也把Javascript再一次推上了风口浪尖。
2008年，谷歌搭载V8引擎的Chrome浏览器横空出世，IE的统治地位不再。得力于快如闪电的V8引擎，Javascript迎来了新的一轮爆发，Node.js、npm、React等技术层出不穷，空前的技术热潮让很多技术可能你刚听说就已经过时，不可谓不壮观。2015年，ECMAScript第六版发布，其带来的许多新特性也让Javascript愈发的有模有样。
如今，Javascript创造的价值已不可估量，虽然其有许多令人诟病之处，但只要合理的避开那些缺陷，Javascript仍不失为一款值得学习的语言。Javascript避坑指南——《Javascript秘密花园》
 本文部分内容参考自阮一峰博客：Javascript诞生记</description>
    </item>
    
  </channel>
</rss>